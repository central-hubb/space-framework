<?php use App\Library\Framework\Component\Code; ?>

<article>
	<h1>HTTP Responses</h1>
	<h4>Creating Responses</h4>
	<h4>Strings &amp; Arrays</h4>
	<p>All routes and controllers should return a response to be sent back to the user's browser. Space MVC provides several different ways to return responses. The most basic response is returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:</p>
	<?php echo Code::getHtmlStatic('Route::get(\'/\', function () {
    return \'Hello World\';
});'); ?>
	<p>In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:</p>
	<?php echo Code::getHtmlStatic('Route::get(\'/\', function () {
    return [1, 2, 3];
});'); ?>
	<p>Did you know you can also return <a href="/docs/5.7/eloquent-collections">Eloquent collections</a> from your routes or controllers? They will automatically be converted to JSON. Give it a shot!</p>
	<h4>Response Objects</h4>
	<p>Typically, you won't just be returning simple strings or arrays from your route actions. Instead, you will be returning full Illuminate\Http\Response instances or <a href="/docs/5.7/views">views</a>.</p>
	<p>Returning a full Response instance allows you to customize the response's HTTP status code and headers. A Response instance inherits from the Symfony\Component\HttpFoundation\Response class, which provides a variety of methods for building HTTP responses:</p>
	<?php echo Code::getHtmlStatic('Route::get(\'home\', function () {
    return response(\'Hello World\', 200)
                  -&gt;header(\'Content-Type\', \'text/plain\');
});'); ?>
	<p><a name="attaching-headers-to-responses"></a></p>
	<h4>Attaching Headers To Responses</h4>
	<p>Keep in mind that most response methods are chainable, allowing for the fluent construction of response instances. For example, you may use the header method to add a series of headers to the response before sending it back to the user:</p>
	<?php echo Code::getHtmlStatic('return response($content)
            -&gt;header(\'Content-Type\', $type)
            -&gt;header(\'X-Header-One\', \'Header Value\')
            -&gt;header(\'X-Header-Two\', \'Header Value\');'); ?>
	<p>Or, you may use the withHeaders method to specify an array of headers to be added to the response:</p>
	<?php echo Code::getHtmlStatic('return response($content)
            -&gt;withHeaders([
                \'Content-Type\' =&gt; $type,
                \'X-Header-One\' =&gt; \'Header Value\',
                \'X-Header-Two\' =&gt; \'Header Value\',
            ]);'); ?>
	<p><a name="attaching-cookies-to-responses"></a></p>
	<h4>Attaching Cookies To Responses</h4>
	<p>The cookie method on response instances allows you to easily attach cookies to the response. For example, you may use the cookie method to generate a cookie and fluently attach it to the response instance like so:</p>
	<?php echo Code::getHtmlStatic('return response($content)
                -&gt;header(\'Content-Type\', $type)
                -&gt;cookie(\'name\', \'value\', $minutes);'); ?>
	<p>The cookie method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP's native <a href="https://secure.php.net/manual/en/function.setcookie.php">setcookie</a> method:</p>
	<?php echo Code::getHtmlStatic('-&gt;cookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)'); ?>
	<p>Alternatively, you can use the Cookie facade to "queue" cookies for attachment to the outgoing response from your application. The queue method accepts a Cookie instance or the arguments needed to create a Cookie instance. These cookies will be attached to the outgoing response before it is sent to the browser:</p>
	<?php echo Code::getHtmlStatic('Cookie::queue(Cookie::make(\'name\', \'value\', $minutes));

Cookie::queue(\'name\', \'value\', $minutes);'); ?>
	<p><a name="cookies-and-encryption"></a></p>
	<h4>Cookies &amp; Encryption</h4>
	<p>By default, all cookies generated by Space MVC are encrypted and signed so that they can't be modified or read by the client. If you would like to disable encryption for a subset of cookies generated by your application, you may use the $except property of the App\Http\Middleware\EncryptCookies middleware, which is located in the app/Http/Middleware directory:</p>
	<?php echo Code::getHtmlStatic('/**
 * The names of the cookies that should not be encrypted.
 *
 * @var array
 */
protected $except = [
    \'cookie_name\',
];'); ?>
	<p><a name="redirects"></a></p>
	<h2><a href="#redirects">Redirects</a></h2>
	<p>Redirect responses are instances of the Illuminate\Http\RedirectResponse class, and contain the proper headers needed to redirect the user to another URL. There are several ways to generate a RedirectResponse instance. The simplest method is to use the global redirect helper:</p>
	<?php echo Code::getHtmlStatic('Route::get(\'dashboard\', function () {
    return redirect(\'home/dashboard\');
});'); ?>
	<p>Sometimes you may wish to redirect the user to their previous location, such as when a submitted form is invalid. You may do so by using the global back helper function. Since this feature utilizes the <a href="/docs/5.7/session">session</a>, make sure the route calling the back function is using the web middleware group or has all of the session middleware applied:</p>
	<?php echo Code::getHtmlStatic('Route::post(\'user/profile\', function () {
    // Validate the request...

    return back()-&gt;withInput();
});'); ?>
	<p><a name="redirecting-named-routes"></a></p>
	<h3>Redirecting To Named Routes</h3>
	<p>When you call the redirect helper with no parameters, an instance of Illuminate\Routing\Redirector is returned, allowing you to call any method on the Redirector instance. For example, to generate a RedirectResponse to a named route, you may use the route method:</p>
	<?php echo Code::getHtmlStatic('return redirect()-&gt;route(\'login\');'); ?>
	<p>If your route has parameters, you may pass them as the second argument to the route method:</p>
	<?php echo Code::getHtmlStatic('// For a route with the following URI: profile/{id}

return redirect()-&gt;route(\'profile\', [\'id\' =&gt; 1]);'); ?>
	<h4>Populating Parameters Via Eloquent Models</h4>
	<p>If you are redirecting to a route with an "ID" parameter that is being populated from an Eloquent model, you may pass the model itself. The ID will be extracted automatically:</p>
	<?php echo Code::getHtmlStatic('// For a route with the following URI: profile/{id}

return redirect()-&gt;route(\'profile\', [$user]);'); ?>
	<p>If you would like to customize the value that is placed in the route parameter, you should override the getRouteKey method on your Eloquent model:</p>
	<?php echo Code::getHtmlStatic('/**
 * Get the value of the model\'s route key.
 *
 * @return mixed
 */
public function getRouteKey()
{
    return $this-&gt;slug;
}'); ?>
	<p><a name="redirecting-controller-actions"></a></p>
	<h3>Redirecting To Controller Actions</h3>
	<p>You may also generate redirects to <a href="/docs/5.7/controllers">controller actions</a>. To do so, pass the controller and action name to the action method. Remember, you do not need to specify the full namespace to the controller since Space MVC's RouteServiceProvider will automatically set the base controller namespace:</p>
	<?php echo Code::getHtmlStatic('return redirect()-&gt;action(\'HomeController@index\');'); ?>
	<p>If your controller route requires parameters, you may pass them as the second argument to the action method:</p>
	<?php echo Code::getHtmlStatic('return redirect()-&gt;action(
    \'UserController@profile\', [\'id\' =&gt; 1]
);'); ?>
	<p><a name="redirecting-external-domains"></a></p>
	<h3>Redirecting To External Domains</h3>
	<p>Sometimes you may need to redirect to a domain outside of your application. You may do so by calling the away method, which creates a RedirectResponse without any additional URL encoding, validation, or verification:</p>
	<?php echo Code::getHtmlStatic('return redirect()-&gt;away(\'https://www.google.com\');'); ?>
	<p><a name="redirecting-with-flashed-session-data"></a></p>
	<h3>Redirecting With Flashed Session Data</h3>
	<p>Redirecting to a new URL and <a href="/docs/5.7/session#flash-data">flashing data to the session</a> are usually done at the same time. Typically, this is done after successfully performing an action when you flash a success message to the session. For convenience, you may create a RedirectResponse instance and flash data to the session in a single, fluent method chain:</p>
	<?php echo Code::getHtmlStatic('Route::post(\'user/profile\', function () {
    // Update the user\'s profile...

    return redirect(\'dashboard\')-&gt;with(\'status\', \'Profile updated!\');
});'); ?>
	<p>After the user is redirected, you may display the flashed message from the <a href="/docs/5.7/session">session</a>. For example, using <a href="/docs/5.7/blade">Blade syntax</a>:</p>
	<?php echo Code::getHtmlStatic('@if (session(\'status\'))
    &lt;div class="alert alert-success"&gt;
        {{ session(\'status\') }}
    &lt;/div&gt;
@endif'); ?>
	<p><a name="other-response-types"></a></p>
	<h2><a href="#other-response-types">Other Response Types</a></h2>
	<p>The response helper may be used to generate other types of response instances. When the response helper is called without arguments, an implementation of the Illuminate\Contracts\Routing\ResponseFactory <a href="/docs/5.7/contracts">contract</a> is returned. This contract provides several helpful methods for generating responses.</p>
	<p><a name="view-responses"></a></p>
	<h3>View Responses</h3>
	<p>If you need control over the response's status and headers but also need to return a <a href="/docs/5.7/views">view</a> as the response's content, you should use the view method:</p>
	<?php echo Code::getHtmlStatic('return response()
            -&gt;view(\'hello\', $data, 200)
            -&gt;header(\'Content-Type\', $type);'); ?>
	<p>Of course, if you do not need to pass a custom HTTP status code or custom headers, you should use the global view helper function.</p>
	<p><a name="json-responses"></a></p>
	<h3>JSON Responses</h3>
	<p>The json method will automatically set the Content-Type header to application/json, as well as convert the given array to JSON using the json_encode PHP function:</p>
	<?php echo Code::getHtmlStatic('return response()-&gt;json([
    \'name\' =&gt; \'Abigail\',
    \'state\' =&gt; \'CA\'
]);'); ?>
	<p>If you would like to create a JSONP response, you may use the json method in combination with the withCallback method:</p>
	<?php echo Code::getHtmlStatic('return response()
            -&gt;json([\'name\' =&gt; \'Abigail\', \'state\' =&gt; \'CA\'])
            -&gt;withCallback($request-&gt;input(\'callback\'));'); ?>
	<p><a name="file-downloads"></a></p>
	<h3>File Downloads</h3>
	<p>The download method may be used to generate a response that forces the user's browser to download the file at the given path. The download method accepts a file name as the second argument to the method, which will determine the file name that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:</p>
	<?php echo Code::getHtmlStatic('return response()-&gt;download($pathToFile);

return response()-&gt;download($pathToFile, $name, $headers);

return response()-&gt;download($pathToFile)-&gt;deleteFileAfterSend();'); ?>	
	<p>Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII file name.</p>
	<h4>Streamed Downloads</h4>
	<p>Sometimes you may wish to turn the string response of a given operation into a downloadable response without having to write the contents of the operation to disk. You may use the streamDownload method in this scenario. This method accepts a callback, file name, and an optional array of headers as its arguments:</p>
	<?php echo Code::getHtmlStatic('return response()-&gt;streamDownload(function () {
    echo GitHub::api(\'repo\')
                -&gt;contents()
                -&gt;readme(\'Space MVC\', \'Space MVC\')[\'contents\'];
}, \'Space MVC-readme.md\');'); ?>
	<p><a name="file-responses"></a></p>
	<h3>File Responses</h3>
	<p>The file method may be used to display a file, such as an image or PDF, directly in the user's browser instead of initiating a download. This method accepts the path to the file as its first argument and an array of headers as its second argument:</p>
	<?php echo Code::getHtmlStatic('return response()-&gt;file($pathToFile);

return response()-&gt;file($pathToFile, $headers);'); ?>
	<p><a name="response-macros"></a></p>
	<h2><a href="#response-macros">Response Macros</a></h2>
	<p>If you would like to define a custom response that you can re-use in a variety of your routes and controllers, you may use the macro method on the Response facade. For example, from a <a href="/docs/5.7/providers">service provider's</a> boot method:</p>
	<?php echo Code::getHtmlStatic('&lt;?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Response;

class ResponseMacroServiceProvider extends ServiceProvider
{
    /**
     * Register the application\'s response macros.
     *
     * @return void
     */
    public function boot()
    {
        Response::macro(\'caps\', function ($value) {
            return Response::make(strtoupper($value));
        });
    }
}'); ?>
	<p>The macro function accepts a name as its first argument, and a Closure as its second. The macro's Closure will be executed when calling the macro name from a ResponseFactory implementation or the response helper:</p>
	<?php echo Code::getHtmlStatic('return response()-&gt;caps(\'foo\');'); ?>
</article>